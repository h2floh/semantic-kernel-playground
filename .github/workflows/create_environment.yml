name: Deploy and Prepare Demo Environment
on: 
  workflow_dispatch:
    inputs:
      restore:
        description: 'Restore Azure OpenAI Account'
        required: true
        type: choice
        options:
        - false
        - true

permissions:
  id-token: write
  contents: read

jobs:
  deploy-infrastructure:
    runs-on: ubuntu-latest
    outputs:
        UNIQUE_SALT: ${{ steps.deploy.outputs.UNIQUE_SALT }}
        AZURE_SEARCH_NAME: ${{ steps.deploy.outputs.AZURE_SEARCH_NAME }}
        AZURE_CONTAINER_REGISTRY: ${{ steps.deploy.outputs.AZURE_CONTAINER_REGISTRY }}
        AZURE_UMSI_CLIENT_ID: ${{ steps.deploy.outputs.AZURE_UMSI_CLIENT_ID }}
    steps:
      - name: 'Az CLI login'
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Checkout code
        uses: actions/checkout@v3

      - name: 'Deploy environment'
        id: deploy
        run: |
          DEPLOY_TIME=$(date +'%Y%m%d%H%M%S')
          echo "SaltString: $DEPLOY_TIME"
          az deployment sub create \
            --name "skp-infra-$DEPLOY_TIME" \
            --verbose \
            --template-file iac/main.bicep \
            --location swedencentral \
            --parameters restore=${{ github.event.inputs.restore }} uniqueStringSalt=$DEPLOY_TIME
          echo "UNIQUE_SALT=$DEPLOY_TIME" >> $GITHUB_OUTPUT  
          echo "AZURE_SEARCH_NAME=$(az deployment sub show --name "skp-infra-$DEPLOY_TIME" --query properties.outputs.azureAiAccountName.value --output tsv)" >> $GITHUB_OUTPUT
          echo "AZURE_CONTAINER_REGISTRY=$(az deployment sub show --name "skp-infra-$DEPLOY_TIME" --query properties.outputs.acrLoginServer.value --output tsv)" >> $GITHUB_OUTPUT
          echo "AZURE_UMSI_CLIENT_ID=$(az deployment sub show --name "skp-infra-$DEPLOY_TIME" --query properties.outputs.userAssignedIdentityClientId.value --output tsv)" >> $GITHUB_OUTPUT
          echo "Service-Prefix: $(az deployment sub show --name "skp-infra-$DEPLOY_TIME" --query properties.outputs.azureAiAccountName.value --output tsv)"
          
  deploy-api:
    needs: deploy-infrastructure
    uses: ./.github/workflows/deploy_container.yml
    with:
      acr: ${{ needs.deploy-infrastructure.outputs.AZURE_CONTAINER_REGISTRY }}
    secrets:
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

  deploy-containerapp:
    needs: [deploy-api, deploy-infrastructure]
    runs-on: ubuntu-latest
    env:
        AZURE_SEARCH_NAME: ${{ needs.deploy-infrastructure.outputs.AZURE_SEARCH_NAME }}
        UNIQUE_SALT: ${{ needs.deploy-infrastructure.outputs.UNIQUE_SALT }}
        AZURE_CONTAINER_REGISTRY: ${{ needs.deploy-infrastructure.outputs.AZURE_CONTAINER_REGISTRY }}
        AZURE_UMSI_CLIENT_ID: ${{ needs.deploy-infrastructure.outputs.AZURE_UMSI_CLIENT_ID }}
    steps:
      - name: 'Az CLI login'
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Create ContainerApp
        run: |
          az deployment sub create \
            --name "skp-app-$UNIQUE_SALT" \
            --verbose \
            --template-file iac/containerapp.bicep \
            --location swedencentral \
            --parameters \
            servicePrefix=$AZURE_SEARCH_NAME \
            uniqueStringSalt=$UNIQUE_SALT \
            acrLoginServer=$AZURE_CONTAINER_REGISTRY \
            userAssignedIdentityClientId=$AZURE_UMSI_CLIENT_ID

  index-data:
    needs: deploy-infrastructure
    runs-on: ubuntu-latest
    env:
        AZURE_SEARCH_NAME: ${{ needs.deploy-infrastructure.outputs.AZURE_SEARCH_NAME }}
        AZURE_STORAGE_RESOURCE_ID: ${{ secrets.AZURE_STORAGE_RESOURCE_ID }}
    steps:
      - name: 'Az CLI login'
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Create DataSources
        run: |
          # Create a datasource for the configuration data
          curl --request PUT \
            --verbose \
            --url 'https://${{ env.AZURE_SEARCH_NAME }}.search.windows.net/datasources(%27configuration%27)?api-version=2024-07-01' \
            --header "authorization: Bearer $(az account get-access-token --scope https://search.azure.com/.default | jq -r .'accessToken')" \
            --header 'content-type: application/json' \
            --header 'user-agent: github-actions' \
            --data '{"name" : "configuration","type" : "azureblob","credentials" : { "connectionString" : "ResourceId=${{ env.AZURE_STORAGE_RESOURCE_ID }};" },"container" : { "name" : "aztfmod", "query" : "Onsite01/configuration" }}'

          # Create a datasource for the example data
          curl --request PUT \
            --verbose \
            --url 'https://${{ env.AZURE_SEARCH_NAME }}.search.windows.net/datasources(%27examples%27)?api-version=2024-07-01' \
            --header "authorization: Bearer $(az account get-access-token --scope https://search.azure.com/.default | jq -r .'accessToken')" \
            --header 'content-type: application/json' \
            --header 'user-agent: vscode-restclient' \
            --data '{"name" : "examples","type" : "azureblob","credentials" : { "connectionString" : "ResourceId=${{ env.AZURE_STORAGE_RESOURCE_ID }};" },"container" : { "name" : "aztfmod", "query" : "terraform-azurerm-caf/examples" }}'

      - name: Create Indices
        run: |
          # Create an index for the configuration data
          curl --request POST \
            --verbose \
            --url 'https://${{ env.AZURE_SEARCH_NAME }}.search.windows.net/indexes?api-version=2024-07-01' \
            --header "authorization: Bearer $(az account get-access-token --scope https://search.azure.com/.default | jq -r .'accessToken')" \
            --header 'content-type: application/json' \
            --header 'user-agent: vscode-restclient' \
            --data '{"name" : "config-index","fields": [{ "name": "content", "type": "Edm.String", "searchable": true, "filterable": false },{ "name": "metadata_storage_name", "type": "Edm.String", "searchable": false, "filterable": true, "sortable": true  },{ "name": "metadata_storage_size", "type": "Edm.Int64", "searchable": false, "filterable": true, "sortable": true  },{ "name": "metadata_storage_content_type", "type": "Edm.String", "searchable": false, "filterable": true, "sortable": true },{ "name": "metadata_storage_file_extension", "type": "Edm.String", "searchable": false, "filterable": true, "sortable": true },{ "name": "metadata_storage_path", "key": true, "type": "Edm.String", "searchable": false }]}'

          # Create an index for the example data
          curl --request POST \
            --verbose \
            --url 'https://${{ env.AZURE_SEARCH_NAME }}.search.windows.net/indexes?api-version=2024-07-01' \
            --header "authorization: Bearer $(az account get-access-token --scope https://search.azure.com/.default | jq -r .'accessToken')" \
            --header 'content-type: application/json' \
            --header 'user-agent: vscode-restclient' \
            --data '{"name" : "aztfmod-index","fields": [{ "name": "content", "type": "Edm.String", "searchable": true, "filterable": false },{ "name": "metadata_storage_name", "type": "Edm.String", "searchable": false, "filterable": true, "sortable": true  },{ "name": "metadata_storage_size", "type": "Edm.Int64", "searchable": false, "filterable": true, "sortable": true  },{ "name": "metadata_storage_content_type", "type": "Edm.String", "searchable": false, "filterable": true, "sortable": true },{ "name": "metadata_storage_file_extension", "type": "Edm.String", "searchable": false, "filterable": true, "sortable": true },{ "name": "metadata_storage_path", "key": true, "type": "Edm.String", "searchable": false }]}'

      - name: Create Indexers
        run: |
          # Create an indexer for the configuration data, will directly run once
          curl --request POST \
            --verbose \
            --url 'https://${{ env.AZURE_SEARCH_NAME }}.search.windows.net/indexers?api-version=2024-07-01' \
            --header "authorization: Bearer $(az account get-access-token --scope https://search.azure.com/.default | jq -r .'accessToken')" \
            --header 'content-type: application/json' \
            --header 'user-agent: vscode-restclient' \
            --data '{"name" : "config-indexer","dataSourceName" : "configuration","targetIndexName" : "config-index","parameters": {"batchSize": null,"maxFailedItems": null,"maxFailedItemsPerBatch": null,"configuration": {"indexedFileNameExtensions" : ".tfvars","excludedFileNameExtensions" : ".png,.jpeg","dataToExtract": "contentAndMetadata","parsingMode": "default"}},"schedule" : { },"fieldMappings" : [{"sourceFieldName": "metadata_storage_path","targetFieldName": "metadata_storage_path","mappingFunction": {"name": "base64Encode","parameters": null}}]}'
          
          # Create an indexer for the example data, will directly run once
          curl --request POST \
            --url 'https://${{ env.AZURE_SEARCH_NAME }}.search.windows.net/indexers?api-version=2024-07-01' \
            --header "authorization: Bearer $(az account get-access-token --scope https://search.azure.com/.default | jq -r .'accessToken')" \
            --header 'content-type: application/json' \
            --header 'user-agent: vscode-restclient' \
            --data '{"name" : "aztfmod-indexer","dataSourceName" : "examples","targetIndexName" : "aztfmod-index","parameters": {"batchSize": null,"maxFailedItems": null,"maxFailedItemsPerBatch": null,"configuration": {"indexedFileNameExtensions" : ".tfvars","excludedFileNameExtensions" : ".png,.jpeg","dataToExtract": "contentAndMetadata","parsingMode": "default"}},"schedule" : { },"fieldMappings" : [{"sourceFieldName": "metadata_storage_path","targetFieldName": "metadata_storage_path","mappingFunction": {"name": "base64Encode","parameters": null}}]}'